!function(e){var t={};function i(n){if(t[n])return t[n].exports;var r=t[n]={i:n,l:!1,exports:{}};return e[n].call(r.exports,r,r.exports,i),r.l=!0,r.exports}i.m=e,i.c=t,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)i.d(n,r,function(t){return e[t]}.bind(null,r));return n},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="./",i(i.s=0)}([function(e,t,i){"use strict";i.r(t);i(1);function n(e){var t=this,i=function(){function e(e){var t=e.range,i=void 0===t?100:t,n=e.start,r=void 0===n?0:n,s=e.end,o=void 0===s?null:s,l=e.origin,h=void 0===l?0:l,a=e.step,d=void 0===a?1:a;this._start=Math.max(r-h,0),this._end=null===o?i:Math.min(i,Math.max(this.start,o-h)),this.range=i,this.origin=h,this.step=d,this.value=[this.start+this.origin,this.end+this.origin]}return Object.defineProperty(e.prototype,"start",{get:function(){return this._start},set:function(e){this._start=Math.min(this.end,Math.max(e,0))},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"end",{get:function(){return this._end},set:function(e){this._end=Math.max(this.start,Math.min(e,this.range))},enumerable:!1,configurable:!0}),e.prototype.update=function(e){if(e.direct)this.end=void 0!==e.endPrc?100/this.range*(e.endPrc-this.origin):this.end,this.start=void 0!==e.startPrc?100/this.range*(e.startPrc-this.origin):this.start;else if(e.tepping_first||e.tepping_last)e.tepping_first&&(this.start+=e.tepping_first*this.step),e.tepping_last&&(this.end+=e.tepping_last*this.step);else{var t=this.range/100*e.startPrc,i=this.range/100*e.endPrc;(i-this.end>=.7*this.step||this.end-i>=.7*this.step||i==this.range)&&(this.end=Math.round(i/this.step)*this.step),(t-this.start>=.7*this.step||this.start-t>=.7*this.step||0==t)&&(this.start=Math.round(t/this.step)*this.step)}this.value=[this.start+this.origin,this.end+this.origin],console.log(this.value),this.updated(100/this.range*this.start,100/this.range*this.end)},e}(),n=function(){function e(e){var t=e.orient,i=void 0===t?"horizontal":t;this.inversion="vertical"===i}return e.prototype.shiftReac=function(e){this.inversion?(e.endPrc&&(e.endPrc=100-e.endPrc),e.startPrc&&(e.startPrc=100-e.startPrc),this.callToModel(e)):this.callToModel(e)},e.prototype.updateReact=function(e,t){this.callToView(e,t)},e}(),r=function(){function e(e){var i=e.orient,n=void 0===i?"horizontal":i,r=e.type,s=void 0===r?"range":r,o=e.tumblerSize,l=void 0===o?"20px":o,h=e.tumblerColor,a=void 0===h?"darkblue":h,d=e.tumblerRoundness,u=void 0===d?"50%":d,c=e.tumblerBorders,p=void 0===c?"none":c,g=e.lineWeight,f=void 0===g?"12px":g,m=e.lineColor,y=void 0===m?"grey":m,v=e.lineRoundness,b=void 0===v?"10px":v,w=e.selectedBackground,S=void 0===w?"blue":w,_=e.selectedWeight,P=void 0===_?"16px":_;this.LineClass=function(){function e(e){this.orient=e.orient,this.weight=e.weight,this.color=e.color,this.roundness=e.roundness}return e.prototype.render=function(){var e=this.element=t.querySelector(".RangeSlider__line");"vertical"==this.orient?e.style.width=this.weight:e.style.height=this.weight,e.style.background=this.color,e.style.borderRadius=this.roundness},e}(),this.TumblerClass=function(){function e(e){this.html="<span tabindex= \"1\"; class='RangeSlider__tumbler'> </span>",this.orient=e.orient,this.type=e.type,this.size=e.size,this.color=e.color,this.roundness=e.roundness}return e.prototype.render=function(){var e=this;this.elements=t.querySelectorAll(".RangeSlider__tumbler"),this.elements.forEach((function(t,i){var n=t;n.style.height=e.size,n.style.width=e.size,n.style.background=e.color,n.style.borderRadius=e.roundness,n.style.border=e.borders,n.style.transform="vertical"==e.orient?"translateY(50%)":"translateX(-50%)","vertical"==e.orient?n.style.marginLeft="calc( (-"+e.size+" + "+n.parentElement.style.width+") /2)":n.style.marginTop="calc((-"+e.size+" + "+n.parentElement.style.height+")/2)","point"===e.type&&0===i&&(n.style.display="none"),n.onmousedown=e.onclick,n.onfocus=e.onfocus}))},e}(),this.SelectedClass=function(){function e(e){this.html="<div class='RangeSlider__selected'></div>",this.orient=e.orient,this.color=e.color,this.weight=e.weight,this.roundness=e.roundness}return e.prototype.render=function(){var e=this.element=t.querySelector(".RangeSlider__selected");"vertical"==this.orient?e.style.marginLeft="calc( (-"+this.weight+" + "+e.parentElement.style.width+") /2)":e.style.marginTop="calc( (-"+this.weight+" + "+e.parentElement.style.height+") /2)","vertical"==this.orient?e.style.width=this.weight:e.style.height=this.weight,e.style.background=this.color,e.style.borderRadius=this.roundness},e}(),this.element,this.orient=n,this.type=s,this.tumbler=new this.TumblerClass({orient:n,type:s,size:l,color:a,roundness:u,borders:p}),this.line=new this.LineClass({orient:n,weight:f,color:y,roundness:b}),this.selected=new this.SelectedClass({roundness:b,orient:n,weight:P,color:S})}return e.prototype.render=function(){var e=this;return t.innerHTML="<div class='RangeSlider RangeSlider_orient_"+this.orient+"'><div class='RangeSlider__line'> "+this.selected.html+this.tumbler.html+this.tumbler.html+"</div> <div class='RangeSlider__meaning'></div> </div></div>",this.tumbler.onclick=function(i){i.preventDefault(),t.onmousemove=function(n){var r=i.target,s=t.querySelector(".RangeSlider"),o="vertical"===e.orient?(n.clientY-s.getBoundingClientRect().y)/s.getBoundingClientRect().height*100:(n.clientX-s.getBoundingClientRect().x)/s.getBoundingClientRect().width*100;r.nextSibling?e.tumblerShifted({startPrc:o}):e.tumblerShifted({endPrc:o})},document.onmouseup=function(e){t.onmousemove=null,document.onmouseup=null}},this.tumbler.onfocus=function(t){var i=Boolean(t.target.nextSibling);document.onkeydown=function(t){i?"ArrowDown"===t.key&&"vertical"===e.orient||"ArrowLeft"===t.key&&"vertical"!==e.orient?e.tumblerShifted({tepping_first:-1}):("ArrowUp"===t.key&&"vertical"===e.orient||"ArrowRight"===t.key&&"vertical"!==e.orient)&&e.tumblerShifted({tepping_first:1}):"ArrowDown"===t.key&&"vertical"===e.orient||"ArrowLeft"===t.key&&"vertical"!==e.orient?e.tumblerShifted({tepping_last:-1}):("ArrowUp"===t.key&&"vertical"===e.orient||"ArrowRight"===t.key&&"vertical"!==e.orient)&&e.tumblerShifted({tepping_last:1})},t.target.onblur=function(e){document.onkeydown=null}},this.line.render(),this.tumbler.render(),this.selected.render(),"point"==this.type?this.tumblerShifted({startPrc:0}):this.tumblerShifted({}),this.element=t.querySelector(".RangeSlider"),this.element},e.prototype.viewUpdate=function(e,t){"vertical"==this.orient?(this.tumbler.elements[0].style.bottom=e+"%",this.tumbler.elements[1].style.bottom=t+"%",this.selected.element.style.bottom=e+"%",this.selected.element.style.top=100-t+"%"):(this.tumbler.elements[0].style.left=e+"%",this.tumbler.elements[1].style.left=t+"%",this.selected.element.style.left=e+"%",this.selected.element.style.right=100-t+"%")},e}();return{Model:new i(e),Presenter:new n(e),View:new r(e),init:function(){this.View.tumblerShifted=this.Presenter.shiftReac.bind(this.Presenter),this.Presenter.callToModel=this.Model.update.bind(this.Model),this.Model.updated=this.Presenter.updateReact.bind(this.Presenter),this.Presenter.callToView=this.View.viewUpdate.bind(this.View),this.View.render()},getValue:function(){return console.log("Selected range: "+this.Model.value[0]+" â€” "+this.Model.value[1]),this.Model.value},setValue:function(e,t){this.Presenter.shiftReac({startPrc:(e-this.Model.origin)/this.Model.range*100,endPrc:(t-this.Model.origin)/this.Model.range*100,direct:!0})}}}var r=document.querySelector(".wrapper>div"),s=document.querySelector(".wrapper-two>div"),o=document.querySelector(".wrapper-three>div"),l=n.call(r,{type:"range",start:20,end:80,step:5}),h=n.call(s,{type:"point",origin:10,range:90,end:10,step:5}),a=n.call(o,{type:"point",orient:"vertical",origin:0,end:5,range:10});l.init(),h.init(),a.init()},function(e,t,i){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,